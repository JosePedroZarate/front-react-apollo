{"version":3,"sources":["constants.js","utils.js","components/Link.js","components/LinkList.js","components/CreateLink.js","components/Login.js","components/Header.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["AUTH_TOKEN","timeDifferenceForDate","date","current","previous","milliSecondsPerMinute","milliSecondsPerHour","milliSecondsPerDay","milliSecondsPerMonth","milliSecondsPerYear","elapsed","Math","round","timeDifference","Date","getTime","VOTE_MUTATION","gql","Link","props","link","authToken","localStorage","getItem","useMutation","variables","linkId","id","onCompleted","createVote","console","log","update","cache","vote","data","updatedLinks","readQuery","query","FEED_QUERY","links","map","feedLink","votes","edges","writeQuery","feed","className","index","style","cursor","onClick","description","url","length","postedBy","username","toLocaleString","CREATE_LINK_MUTATION","CreateLink","history","useHistory","useState","formState","setFormState","post","orderBy","createdAt","take","skip","push","createLink","onSubmit","e","preventDefault","value","onChange","target","type","placeholder","window","location","reload","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","email","password","name","tokenAuth","setItem","token","signup","then","Header","to","removeItem","FEED_SEARCH_QUERY","Search","searchFilter","setSearchFilter","useLazyQuery","executeSearch","search","App","exact","path","render","component","Boolean","hostname","match","httpLink","createHttpLink","uri","client","setContext","_","headers","authorization","onError","graphQLErrors","networkError","forEach","message","locations","ApolloClient","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2184134c.chunk.js","sourcesContent":["export const AUTH_TOKEN = 'auth-token';\nexport const LINKS_PER_PAGE = 5;\n\n","function timeDifference(current, previous) {\n  const milliSecondsPerMinute = 60 * 1000;\n  const milliSecondsPerHour = milliSecondsPerMinute * 60;\n  const milliSecondsPerDay = milliSecondsPerHour * 24;\n  const milliSecondsPerMonth = milliSecondsPerDay * 30;\n  const milliSecondsPerYear = milliSecondsPerDay * 365;\n\n  const elapsed = current - previous;\n\n  if (elapsed < milliSecondsPerMinute / 3) {\n    return 'just now';\n  }\n\n  if (elapsed < milliSecondsPerMinute) {\n    return 'less than 1 min ago';\n  } else if (elapsed < milliSecondsPerHour) {\n    return (\n      Math.round(elapsed / milliSecondsPerMinute) +\n      ' min ago'\n    );\n  } else if (elapsed < milliSecondsPerDay) {\n    return (\n      Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n    );\n  } else if (elapsed < milliSecondsPerMonth) {\n    return (\n      Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n    );\n  } else if (elapsed < milliSecondsPerYear) {\n    return (\n      Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n    );\n  } else {\n    return (\n      Math.round(elapsed / milliSecondsPerYear) +\n      ' years ago'\n    );\n  }\n}\n\nexport function timeDifferenceForDate(date) {\n  const now = new Date().getTime();\n  const updated = new Date(date).getTime();\n  return timeDifference(now, updated);\n}\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\n\nimport { AUTH_TOKEN, LINKS_PER_PAGE } from '../constants';\nimport { timeDifferenceForDate } from '../utils';\nimport { FEED_QUERY } from './LinkList';\n\nconst VOTE_MUTATION = gql`\n  mutation createVote($linkId: Int!) {\n    createVote(linkId: $linkId) {\n      user {\n        username\n        email\n      }\n      link {\n        url\n        description\n      }\n    }\n  }\n`;\n\nconst Link = (props) => {\n  const { link } = props;\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n\n  const take = LINKS_PER_PAGE;\n  const skip = 0;\n  const orderBy = { createdAt: 'desc' };\n\n  const [vote] = useMutation(VOTE_MUTATION, {\n    variables: {\n      linkId: link.id\n    },\n    onCompleted: ({ createVote }) => {\n      console.log(createVote);\n    },\n   update(cache, { data: { vote } }) {\n      const { links } = cache.readQuery({\n        query: FEED_QUERY\n      });\n\n    const updatedLinks = links.map((feedLink) => {\n        if (feedLink.id === link.id) {\n          return {\n            ...feedLink,\n            votes: [...feedLink.votes.edges, vote]\n          };\n        }\n        return feedLink;\n      } );\n\n\n    cache.writeQuery({\n        query: FEED_QUERY,\n        data: {\n          feed: {\n            links: updatedLinks\n          }\n        }\n    });\n  }\n})\n\n  return (\n    <div className=\"flex mt2 items-start\">\n      <div className=\"flex items-center\">\n\n        <span className=\"gray\">{props.index + 1}.</span>\n\n        {authToken && (\n          <div\n            className=\"ml1 gray f11\"\n            style={{ cursor: 'pointer' }}\n            onClick={vote}\n          >\n            ▲\n          </div>\n        )}\n      </div>\n      <div className=\"ml1\">\n        <div>\n        {link.id} - {link.description} ({link.url})\n        </div>\n        {authToken && (\n          <div className=\"f6 lh-copy gray\">\n            {link.votes.edges.length} votes | by{' '}\n            {link.postedBy ? link.postedBy.username : 'Unknown'}{' '}\n            {timeDifferenceForDate(Date().toLocaleString())}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Link;\n\n","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { LINKS_PER_PAGE } from '../constants';\nimport Link from './Link';\n\n\n\n\n\nexport const FEED_QUERY = gql`\n  {\n  links{\n    id\n    url\n    description\n    postedBy{\n      id\n      email\n      username\n    }\n    votes{\n      edges{\n        node{\n          id\n          link{\n            id\n            url\n            description\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\n\n\n\nconst LinkList = () => {\n    const { data } = useQuery(FEED_QUERY);\n\n    return (\n    <div>\n    {data && (\n      <>\n        {data.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n      </>\n    )}\n  </div>\n    );\n  };\n\nexport default LinkList;\n\n","import React, { useState } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { LINKS_PER_PAGE } from '../constants';\nimport { FEED_QUERY } from './LinkList';\n\n\nconst CREATE_LINK_MUTATION = gql`\n  mutation CreateLink(\n    $description: String!\n    $url: String!\n  ) {\n    createLink(description: $description, url: $url) {\n      id\n      url\n      description\n    }\n  }\n`;\n\nconst CreateLink = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    description: '',\n    url: ''\n  });\n\n\n const [createLink] = useMutation(CREATE_LINK_MUTATION, {\n    variables: {\n      description: formState.description,\n      url: formState.url\n    },\n    update: (cache, { data: { post } }) => {\n      const take = LINKS_PER_PAGE;\n      const skip = 0;\n      const orderBy = { createdAt: 'desc' };\n\n      const data = cache.readQuery({\n        query: FEED_QUERY,\n        variables: {\n          take,\n          skip,\n          orderBy\n        }\n      });\n\n      cache.writeQuery({\n        query: FEED_QUERY,\n        data: {\n          feed: {\n            links: [post, ...data.feed.links]\n          }\n        },\n        variables: {\n          take,\n          skip,\n          orderBy\n        }\n      });\n    },\n    onCompleted: () => history.push('/new/1')\n  });\n\n\n\n//Crea funcion para lmandar a otro componente\n  function clickHistory(){\n    history.push(\"/\");\n    window.location.reload()\n  }\n  function refreshPage(){\n    window.location.reload()\n  }\n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          createLink();\n        }}\n      >\n        <div className=\"flex flex-column mt3\">\n\n          <input\n            className=\"mb2\"\n            value={formState.description}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                description: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"✍🏻 INGRESAR DESCRIPCION DEL LINK\"\n          />\n          <input\n            className=\"mb2\"\n            value={formState.url}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                url: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"🔗 INGRESAR URL DEL LINK\"\n          />\n        </div>\n        <button type=\"submit\"  onClick={ () => {\n        createLink()\n          clickHistory() //Se llama a la funcion\n\n        } }>GUARDAR</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateLink;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\nimport { Link } from 'react-router-dom';\n\n\nconst SIGNUP_MUTATION = gql`\nmutation SignupMutation(\n  $email: String!\n  $password: String!\n  $username: String!\n) {\n  createUser(\n    email: $email\n    password: $password\n    username: $username\n  ) {\n   user{\n    id\n    email\n    password\n    username\n  }\n  }\n\n  tokenAuth(username: $username,password: $password){\n  token\n  }\n}\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation TokenAuth(\n    $username: String!\n    $password: String!\n  ) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\n\n\nconst Login = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    login: true,\n    email: '',\n    password: '',\n    name: ''\n  });\n\nconst [login] = useMutation(LOGIN_MUTATION, {\n  variables: {\n    username: formState.email,\n    password: formState.password\n  },\n  onCompleted: ({ tokenAuth }) => {\n    console.log(tokenAuth);\n    localStorage.setItem(AUTH_TOKEN, tokenAuth.token);\n    history.push('/');\n  }\n});\n\n\nfunction refreshPage(){\n  window.location.reload(true);\n}\n\nconst [signup] = useMutation(SIGNUP_MUTATION, {\n  variables: {\n    username: formState.name,\n    email: formState.email,\n    password: formState.password\n  },\n  onCompleted: ({ tokenAuth }) => {\n    localStorage.setItem(AUTH_TOKEN, tokenAuth.token);\n    history.push('/');\n\n  }\n});\n\n\n\n  return (\n    <div>\n      <h4 className=\"mv3\">\n        {formState.login ? '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   ⠀ ⠀LOGIN 👤' : '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ CREAR CUENTA 👤'}\n      </h4>\n      <div className=\"flex flex-column\">\n        {!formState.login && (\n          <input\n            value={formState.name}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                name: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"👤 INGRESA TU NOMBRE AQUI CRACK!\"\n          />\n        )}\n        <input\n          value={formState.email}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              email: e.target.value\n            })\n          }\n          type=\"text\"\n          placeholder=\"✉️ TU CORREO AQUI CRACK!\"\n        />\n        <input\n          value={formState.password}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              password: e.target.value\n            })\n          }\n          type=\"password\"\n          placeholder=\"🔑 AQUI TU CONTRASEÑA xD\"\n        />\n      </div>\n      <div className=\"flex mt3\">\n\n<button\n    className=\"pointer mr2 button\"\n    onClick={() => {\n      //formState.login ? login : signup ()\n      if (formState.login ) {\n        login(formState.username, formState.password ).then(()=>{\n          window.location.reload()\n\n        })\n\n      } else {\n        signup(formState.name, formState.password)\n      }\n    }}\n  >\n    {formState.login ? 'INGRESAR' : 'CREAR' }\n\n\n  </button >\n  <button\n    className=\"pointer button\"\n    onClick={(e) =>\n      setFormState({\n        ...formState,\n        login: !formState.login\n      })\n    }\n  >\n          {formState.login\n            ? '¿NO TIENES CUENTA?'\n            : '¿YA TIENES CUENTA CRACK?'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { useHistory } from 'react-router';\n//import { Link, withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { AUTH_TOKEN } from '../constants';\nimport Login from './Login';\n\nconst Header = () => {\n  const history = useHistory();\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n\n  function clickLogout(){\n    history.push(\"/login\")\n  }\n  return (\n    <div className=\"flex pa1 justify-between nowrap orange\">\n      <div className=\"flex flex-fixed black\">\n        <div className=\"fw7 mr1\">⠀Links by Pedro xD⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</div>\n        <Link to=\"/\" className=\"ml1 no-underline black\">\n        ⠀🕐RECIENTES⠀\n        </Link>\n\n\t<div className=\"ml1\">|</div>\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\n        ⠀📈PRINCIPALES⠀\n        </Link>\n\n        <div className=\"ml1\">|</div>\n        <Link to=\"/search\" className=\"ml1 no-underline black\">\n        ⠀🔍BUSCAR⠀\n        </Link>\n\n        {authToken && (\n          <div className=\"flex\">\n            <div className=\"ml1\">|</div>\n\t<Link to=\"/create\"\n          className=\"ml1 no-underline black\"\n        >\n         ⠀➕AGREGAR NUEVO LINK⠀\n            </Link>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-fixed\">\n        {authToken ? (\n          <div\n            className=\"ml1 pointer black\"\n            onClick={() => {\n              localStorage.removeItem(AUTH_TOKEN);\n              clickLogout()\n              window.location.reload()\n\n            }}\n          >\n            ⠀SALIR 🁢⠀\n          </div>\n        ) : (\n          <Link\n            to=\"/login\"\n            className=\"ml1 no-underline black\"\n          >\n            ⠀INGRESAR 🁣⠀\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Link from './Link';\n\n\n\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($search: String) {\n  links(search: $search){\n      id\n      url\n        description\n        postedBy {\n          id\n          username\n        }\n        votes {\n          edges{\n            node{\n              id\n               user {\n                id\n            }\n            }\n          }\n\n        }\n       # createdAt\n  }\n}\n`;\n\nconst Search = () => {\n  const [searchFilter, setSearchFilter] = useState('');\n  const [executeSearch, { data }] = useLazyQuery(\n    FEED_SEARCH_QUERY\n  );\n\n  return (\n    <>\n      <div>\n      🔍⠀\n        <input\n          type=\"text\"\n          onChange={(e) => setSearchFilter(e.target.value)}\n        />\n        <button\n          onClick={() =>\n            executeSearch({\n              variables: { search: searchFilter }\n            })\n          }\n        >\n      BUSCAR\n        </button>\n      </div>\n      {data &&\n        data.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n    </>\n  );\n};\nexport default Search;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport CreateLink from './CreateLink';\nimport Header from './Header';\nimport LinkList from './LinkList';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './Login'\nimport Search from './Search';;\n\nconst App = () => (\n  <div className=\"center w85\">\n    <Header />\n    <div className=\"ph3 pv1 background-gray\">\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => <Redirect to=\"/new/1\"/>}\n        />\n\n        <Route\n          exact\n          path=\"/create\"\n          component={CreateLink}\n        />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/search\" component={Search} />\n      </Switch>\n    </div>\n  </div>\n);\n\nexport default App;\n\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\nimport { onError } from \"@apollo/client/link/error\"\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\n// 2\nconst httpLink = createHttpLink({\n  uri: 'http://35.232.232.192:8091/graphql/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `JWT ${token}` : ''\n    }\n  };\n});\n\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\n\n// 3\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\n\n\n// 4\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}